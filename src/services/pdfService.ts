// src/services/pdfService.ts
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { marked } from 'marked';
import { BookProject } from '../types';

let isGenerating = false;

// Helper to add the branded footer to each page
const addBrandingFooter = (doc: jsPDF, pageNumber: number, totalPages: number) => {
  const pageHeight = doc.internal.pageSize.getHeight();
  const pageWidth = doc.internal.pageSize.getWidth();
  doc.setFontSize(9);
  doc.setTextColor('#a0a0a0'); // A light grey for the footer text

  // Pustakam Branding on the left
  const brandingText = 'Generated by Pustakam AI';
  doc.text(brandingText, 15, pageHeight - 10);

  // Page Number on the right
  const pageNumText = `Page ${pageNumber} of ${totalPages}`;
  const textWidth = doc.getStringUnitWidth(pageNumText) * doc.getFontSize() / doc.internal.scaleFactor;
  doc.text(pageNumText, pageWidth - 15 - textWidth, pageHeight - 10);
};

export const pdfService = {
  async generatePdf(project: BookProject, onProgress: (progress: number) => void): Promise<void> {
    if (isGenerating) {
      alert('A PDF is already being generated. Please wait.');
      return;
    }
    if (!project.finalBook) {
      alert('Book content is not available for PDF export.');
      return;
    }

    isGenerating = true;
    onProgress(5);

    try {
      // 1. Create a temporary, off-screen container for rendering
      const container = document.createElement('div');
      container.style.position = 'fixed';
      container.style.left = '-9999px';
      container.style.width = '800px'; // A fixed width is crucial for consistent rendering
      container.style.background = 'white';
      container.style.color = '#1a1a1a';
      container.style.padding = '20px'; // Internal padding
      
      // Convert Markdown to HTML and apply styling
      const htmlContent = await marked.parse(project.finalBook);
      container.innerHTML = `
        <style>
          body { margin: 0; }
          h1, h2, h3 { font-family: 'Helvetica', 'Arial', sans-serif; border-bottom: 1px solid #eee; padding-bottom: 8px; margin-top: 1.5em; color: #000; }
          h1 { font-size: 28px; } h2 { font-size: 24px; } h3 { font-size: 20px; }
          p { font-family: 'Georgia', serif; font-size: 16px; line-height: 1.7; }
          pre { background-color: #f5f5f5; padding: 15px; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-size: 14px; }
          code { font-family: 'Courier New', monospace; }
          blockquote { border-left: 3px solid #ccc; padding-left: 15px; margin-left: 0; color: #555; }
        </style>
        ${htmlContent}
      `;
      document.body.appendChild(container);

      onProgress(20);

      // 2. Initialize jsPDF and calculate page dimensions
      const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();
      const margin = 15;
      const contentWidth = pageWidth - (margin * 2);
      const contentHeight = pageHeight - (margin * 2);

      // Calculate the pixel equivalent of the PDF content height. This is key for slicing.
      const pageHeightInPixels = (container.clientWidth / contentWidth) * contentHeight;
      const totalContentHeight = container.scrollHeight;
      const totalPages = Math.ceil(totalContentHeight / pageHeightInPixels);

      onProgress(30);

      // 3. Loop through each page, capture only its slice, and add to PDF
      for (let i = 0; i < totalPages; i++) {
        const canvas = await html2canvas(container, {
          scale: 2,
          useCORS: true,
          logging: false,
          width: container.clientWidth,
          height: pageHeightInPixels, // Capture only one page height
          y: i * pageHeightInPixels, // The vertical offset for the slice
        });

        const imgData = canvas.toDataURL('image/png');
        
        if (i > 0) {
          doc.addPage();
        }
        
        doc.addImage(imgData, 'PNG', margin, margin, contentWidth, contentHeight);
        addBrandingFooter(doc, i + 1, totalPages);

        // Update progress in a meaningful way
        const progress = Math.min(95, 30 + Math.round(((i + 1) / totalPages) * 65));
        onProgress(progress);
      }

      document.body.removeChild(container); // Clean up the temporary element

      // 4. Save the generated PDF
      const safeTitle = project.title.replace(/[^a-z0-9\s-]/gi, '').replace(/\s+/g, '_').toLowerCase();
      doc.save(`${safeTitle}_by_pustakam.pdf`);

      onProgress(100);

    } catch (error) {
      console.error('Failed to generate PDF:', error);
      alert('An error occurred while generating the PDF. Please check the console for details.');
      onProgress(0); // Reset progress on error
    } finally {
      isGenerating = false;
    }
  }
};
